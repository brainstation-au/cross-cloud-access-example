name: Cross Cloud Access Examples

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  ARM_USE_OIDC: true

jobs:
  deploy-aws-lambda-to-gcp:
    name: Deploy AWS Lambda to GCP
    runs-on: ubuntu-latest
    timeout-minutes: 5
    permissions:
      id-token: write
      contents: read
    env:
      TF_VAR_github_repository: ${{ github.repository }}
      TF_VAR_github_repository_owner: ${{ github.repository_owner }}
      TF_VAR_aws_region: ${{ vars.AWS_REGION }}
      TF_VAR_google_project_id: ${{ vars.GOOGLE_PROJECT_ID }}
      TF_VAR_gcp_identity_pool_for_aws: ${{ secrets.GOOGLE_WORKLOAD_IDENTITY_POOL_AWS }}
      TF_VAR_app_name: aws-lambda-to-gcp
    defaults:
      run:
        shell: bash
        working-directory: aws-lambda-to-gcp

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Azure login
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ vars.AZURE_SUBSCRIPTION_ID }}

      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_IAM_ROLE_ARN }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: GCP login
        uses: google-github-actions/auth@v2
        with:
          service_account: ${{ secrets.GOOGLE_SERVICE_ACCOUNT }}
          workload_identity_provider: ${{ secrets.GOOGLE_WORKLOAD_IDENTITY_PROVIDER }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        # with:
        #   platforms: linux/arm64

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        # with:
        #   platforms: linux/arm64

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Install terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform fmt
        id: fmt
        run: terraform fmt -check -recursive

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Create ECR Repository
        run: terraform apply -auto-approve -target=aws_ecr_repository.this

      - name: Build and push image
        uses: docker/build-push-action@v5
        with:
          context: aws-lambda-to-gcp/lambda
          platforms: linux/amd64
          cache-from: ${{ steps.login-ecr.outputs.registry }}/${{ env.TF_VAR_app_name }}:latest
          push: true
          tags: |
            ${{ steps.login-ecr.outputs.registry }}/${{ env.TF_VAR_app_name }}:${{ github.sha }}
            ${{ steps.login-ecr.outputs.registry }}/${{ env.TF_VAR_app_name }}:latest

      - name: Apply terraform
        run: terraform apply -auto-approve
        env:
          TF_VAR_image_uri: ${{ steps.login-ecr.outputs.registry }}/${{ env.TF_VAR_app_name }}:${{ github.sha }}
